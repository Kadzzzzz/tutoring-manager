#!/usr/bin/env node

// simple-test.js - Test simple des corrections
console.log('üß™ Test simple des corrections\n')

async function testCorrections() {
  try {
    const path = require('path')
    const fs = require('fs-extra')

    // 1. V√©rifier le chemin du projet jeremy-tutoring
    const parentDir = require('os').homedir() + '/Documents'
    const jeremyTutoringPath = path.join(parentDir, 'jeremy-tutoring')
    const translationsPath = path.join(jeremyTutoringPath, 'src', 'i18n', 'translations.js')

    console.log('üìÅ V√©rification des chemins...')
    console.log('   Parent:', parentDir)
    console.log('   Jeremy-tutoring:', jeremyTutoringPath)
    console.log('   Translations:', translationsPath)

    if (await fs.pathExists(jeremyTutoringPath)) {
      console.log('‚úÖ Projet jeremy-tutoring trouv√©')
    } else {
      console.log('‚ùå Projet jeremy-tutoring NON trouv√©')
      return
    }

    if (await fs.pathExists(translationsPath)) {
      console.log('‚úÖ Fichier translations.js trouv√©')
    } else {
      console.log('‚ùå Fichier translations.js NON trouv√©')
      return
    }

    // 2. Tester la lecture du fichier
    console.log('\nüìñ Test de lecture du fichier...')
    const content = await fs.readFile(translationsPath, 'utf8')
    console.log('‚úÖ Fichier lu, taille:', content.length, 'caract√®res')

    // 3. Tester l'extraction des traductions
    console.log('\nüîç Test d\'extraction...')
    const resourceParser = require('./src/main/services/resourceParser')
    const translations = resourceParser.extractTranslationsFromFile(content)

    if (translations) {
      console.log('‚úÖ Traductions extraites')
      console.log('   FR exercises:', Object.keys(translations?.fr?.resources?.exercises || {}))
      console.log('   EN exercises:', Object.keys(translations?.en?.resources?.exercises || {}))

      // V√©rifier une ressource existante
      const interro = translations?.fr?.resources?.exercises?.maths?.interro0LLG
      if (interro) {
        console.log('‚úÖ Ressource existante trouv√©e:', interro.title)
      } else {
        console.log('‚ùå Ressource existante NON trouv√©e')
      }
    } else {
      console.log('‚ùå √âchec de l\'extraction')
    }

    // 4. Test d'ajout de traductions
    console.log('\n‚ûï Test d\'ajout de traductions...')
    const codeGenerator = require('./src/main/services/codeGenerator')

    const testTranslations = {
      fr: { title: 'Test FR', description: 'Desc FR', fullDescription: 'Full FR', notes: 'Notes FR' },
      en: { title: 'Test EN', description: 'Desc EN', fullDescription: 'Full EN', notes: 'Notes EN' }
    }

    const newContent = await codeGenerator.addTranslationsForResource(
      content, 'maths', 'testCorrection', testTranslations.fr, testTranslations.en
    )

    if (newContent.includes('testCorrection')) {
      console.log('‚úÖ Traductions ajout√©es dans le contenu')

      // Test d'extraction du nouveau contenu
      const newTranslations = resourceParser.extractTranslationsFromFile(newContent)
      const addedFr = newTranslations?.fr?.resources?.exercises?.maths?.testCorrection
      const addedEn = newTranslations?.en?.resources?.exercises?.maths?.testCorrection

      if (addedFr && addedEn) {
        console.log('‚úÖ Nouvelles traductions v√©rifi√©es:')
        console.log('   FR:', addedFr.title)
        console.log('   EN:', addedEn.title)
      } else {
        console.log('‚ùå Nouvelles traductions non trouv√©es apr√®s extraction')
      }
    } else {
      console.log('‚ùå Traductions non ajout√©es')
    }

    console.log('\nüéâ Test termin√© !')

  } catch (error) {
    console.error('‚ùå Erreur durant le test:', error.message)
    console.error('Stack:', error.stack)
  }
}

testCorrections()